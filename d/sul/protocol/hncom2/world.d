/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom2.xml
 */
module sul.protocol.hncom2.world;

import std.bitmanip : write, peek;
static import std.conv;
import std.system : Endian;
import std.typetuple : TypeTuple;
import std.typecons : Tuple;
import std.uuid : UUID;

import sul.utils.buffer;
import sul.utils.var;

static import sul.protocol.hncom2.types;

static if(__traits(compiles, { import sul.metadata.hncom2; })) import sul.metadata.hncom2;

alias Packets = TypeTuple!(Add, Remove, UpdateDifficulty, UpdateGamemode, RequestCreation);

class Add : Buffer {

	public enum ubyte ID = 31;

	public enum bool CLIENTBOUND = false;
	public enum bool SERVERBOUND = true;

	// dimension
	public enum ubyte OVERWORLD = 0;
	public enum ubyte NETHER = 1;
	public enum ubyte END = 2;

	// generator
	public enum ubyte DEFAULT = 0;
	public enum ubyte FLAT = 1;

	// difficulty
	public enum ubyte PEACEFUL = 0;
	public enum ubyte EASY = 1;
	public enum ubyte NORMAL = 2;
	public enum ubyte HARD = 3;
	public enum ubyte HARDCORE = 4;

	// gamemode
	public enum ubyte SURVIVAL = 0;
	public enum ubyte CREATIVE = 1;
	public enum ubyte ADVENTURE = 2;
	public enum ubyte SPECTATOR = 3;

	public enum string[] FIELDS = ["worldId", "name", "dimension", "generator", "difficulty", "gamemode", "spawnPoint", "time", "seed", "parent"];

	public uint worldId;
	public string name;
	public ubyte dimension;
	public ubyte generator;
	public ubyte difficulty;
	public ubyte gamemode;
	public Tuple!(int, "x", int, "z") spawnPoint;
	public short time;
	public int seed;
	public int parent = -1;

	public pure nothrow @safe @nogc this() {}

	public pure nothrow @safe @nogc this(uint worldId, string name=string.init, ubyte dimension=ubyte.init, ubyte generator=ubyte.init, ubyte difficulty=ubyte.init, ubyte gamemode=ubyte.init, Tuple!(int, "x", int, "z") spawnPoint=Tuple!(int, "x", int, "z").init, short time=short.init, int seed=int.init, int parent=-1) {
		this.worldId = worldId;
		this.name = name;
		this.dimension = dimension;
		this.generator = generator;
		this.difficulty = difficulty;
		this.gamemode = gamemode;
		this.spawnPoint = spawnPoint;
		this.time = time;
		this.seed = seed;
		this.parent = parent;
	}

	public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
		_buffer.length = 0;
		static if(writeId){ writeBigEndianUbyte(ID); }
		writeBytes(varuint.encode(worldId));
		writeBytes(varuint.encode(cast(uint)name.length)); writeString(name);
		writeBigEndianUbyte(dimension);
		writeBigEndianUbyte(generator);
		writeBigEndianUbyte(difficulty);
		writeBigEndianUbyte(gamemode);
		writeBytes(varint.encode(spawnPoint.x)); writeBytes(varint.encode(spawnPoint.z));
		writeBigEndianShort(time);
		writeBytes(varint.encode(seed));
		writeBytes(varint.encode(parent));
		return _buffer;
	}

	public pure nothrow @safe void decode(bool readId=true)() {
		static if(readId){ ubyte _id; _id=readBigEndianUbyte(); }
		worldId=varuint.decode(_buffer, &_index);
		uint bfz=varuint.decode(_buffer, &_index); name=readString(bfz);
		dimension=readBigEndianUbyte();
		generator=readBigEndianUbyte();
		difficulty=readBigEndianUbyte();
		gamemode=readBigEndianUbyte();
		spawnPoint.x=varint.decode(_buffer, &_index); spawnPoint.z=varint.decode(_buffer, &_index);
		time=readBigEndianShort();
		seed=varint.decode(_buffer, &_index);
		parent=varint.decode(_buffer, &_index);
	}

	public static pure nothrow @safe Add fromBuffer(bool readId=true)(ubyte[] buffer) {
		Add ret = new Add();
		ret._buffer = buffer;
		ret.decode!readId();
		return ret;
	}

	public override string toString() {
		return "Add(worldId: " ~ std.conv.to!string(this.worldId) ~ ", name: " ~ std.conv.to!string(this.name) ~ ", dimension: " ~ std.conv.to!string(this.dimension) ~ ", generator: " ~ std.conv.to!string(this.generator) ~ ", difficulty: " ~ std.conv.to!string(this.difficulty) ~ ", gamemode: " ~ std.conv.to!string(this.gamemode) ~ ", spawnPoint: " ~ std.conv.to!string(this.spawnPoint) ~ ", time: " ~ std.conv.to!string(this.time) ~ ", seed: " ~ std.conv.to!string(this.seed) ~ ", parent: " ~ std.conv.to!string(this.parent) ~ ")";
	}

}

class Remove : Buffer {

	public enum ubyte ID = 32;

	public enum bool CLIENTBOUND = false;
	public enum bool SERVERBOUND = true;

	public enum string[] FIELDS = ["worldId"];

	public uint worldId;

	public pure nothrow @safe @nogc this() {}

	public pure nothrow @safe @nogc this(uint worldId) {
		this.worldId = worldId;
	}

	public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
		_buffer.length = 0;
		static if(writeId){ writeBigEndianUbyte(ID); }
		writeBytes(varuint.encode(worldId));
		return _buffer;
	}

	public pure nothrow @safe void decode(bool readId=true)() {
		static if(readId){ ubyte _id; _id=readBigEndianUbyte(); }
		worldId=varuint.decode(_buffer, &_index);
	}

	public static pure nothrow @safe Remove fromBuffer(bool readId=true)(ubyte[] buffer) {
		Remove ret = new Remove();
		ret._buffer = buffer;
		ret.decode!readId();
		return ret;
	}

	public override string toString() {
		return "Remove(worldId: " ~ std.conv.to!string(this.worldId) ~ ")";
	}

}

class UpdateDifficulty : Buffer {

	public enum ubyte ID = 33;

	public enum bool CLIENTBOUND = false;
	public enum bool SERVERBOUND = true;

	public enum string[] FIELDS = ["worldId", "difficulty"];

	public uint worldId;
	public ubyte difficulty;

	public pure nothrow @safe @nogc this() {}

	public pure nothrow @safe @nogc this(uint worldId, ubyte difficulty=ubyte.init) {
		this.worldId = worldId;
		this.difficulty = difficulty;
	}

	public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
		_buffer.length = 0;
		static if(writeId){ writeBigEndianUbyte(ID); }
		writeBytes(varuint.encode(worldId));
		writeBigEndianUbyte(difficulty);
		return _buffer;
	}

	public pure nothrow @safe void decode(bool readId=true)() {
		static if(readId){ ubyte _id; _id=readBigEndianUbyte(); }
		worldId=varuint.decode(_buffer, &_index);
		difficulty=readBigEndianUbyte();
	}

	public static pure nothrow @safe UpdateDifficulty fromBuffer(bool readId=true)(ubyte[] buffer) {
		UpdateDifficulty ret = new UpdateDifficulty();
		ret._buffer = buffer;
		ret.decode!readId();
		return ret;
	}

	public override string toString() {
		return "UpdateDifficulty(worldId: " ~ std.conv.to!string(this.worldId) ~ ", difficulty: " ~ std.conv.to!string(this.difficulty) ~ ")";
	}

}

class UpdateGamemode : Buffer {

	public enum ubyte ID = 34;

	public enum bool CLIENTBOUND = false;
	public enum bool SERVERBOUND = true;

	public enum string[] FIELDS = ["worldId", "gamemode"];

	public uint worldId;
	public ubyte gamemode;

	public pure nothrow @safe @nogc this() {}

	public pure nothrow @safe @nogc this(uint worldId, ubyte gamemode=ubyte.init) {
		this.worldId = worldId;
		this.gamemode = gamemode;
	}

	public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
		_buffer.length = 0;
		static if(writeId){ writeBigEndianUbyte(ID); }
		writeBytes(varuint.encode(worldId));
		writeBigEndianUbyte(gamemode);
		return _buffer;
	}

	public pure nothrow @safe void decode(bool readId=true)() {
		static if(readId){ ubyte _id; _id=readBigEndianUbyte(); }
		worldId=varuint.decode(_buffer, &_index);
		gamemode=readBigEndianUbyte();
	}

	public static pure nothrow @safe UpdateGamemode fromBuffer(bool readId=true)(ubyte[] buffer) {
		UpdateGamemode ret = new UpdateGamemode();
		ret._buffer = buffer;
		ret.decode!readId();
		return ret;
	}

	public override string toString() {
		return "UpdateGamemode(worldId: " ~ std.conv.to!string(this.worldId) ~ ", gamemode: " ~ std.conv.to!string(this.gamemode) ~ ")";
	}

}

class RequestCreation : Buffer {

	public enum ubyte ID = 35;

	public enum bool CLIENTBOUND = true;
	public enum bool SERVERBOUND = false;

	public enum string[] FIELDS = ["name", "dimension", "generator", "difficulty", "gamemode", "seed", "parent"];

	public string name;
	public ubyte dimension;
	public ubyte generator;
	public ubyte difficulty;
	public ubyte gamemode;
	public int seed;
	public int parent = -1;

	public pure nothrow @safe @nogc this() {}

	public pure nothrow @safe @nogc this(string name, ubyte dimension=ubyte.init, ubyte generator=ubyte.init, ubyte difficulty=ubyte.init, ubyte gamemode=ubyte.init, int seed=int.init, int parent=-1) {
		this.name = name;
		this.dimension = dimension;
		this.generator = generator;
		this.difficulty = difficulty;
		this.gamemode = gamemode;
		this.seed = seed;
		this.parent = parent;
	}

	public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
		_buffer.length = 0;
		static if(writeId){ writeBigEndianUbyte(ID); }
		writeBytes(varuint.encode(cast(uint)name.length)); writeString(name);
		writeBigEndianUbyte(dimension);
		writeBigEndianUbyte(generator);
		writeBigEndianUbyte(difficulty);
		writeBigEndianUbyte(gamemode);
		writeBytes(varint.encode(seed));
		writeBytes(varint.encode(parent));
		return _buffer;
	}

	public pure nothrow @safe void decode(bool readId=true)() {
		static if(readId){ ubyte _id; _id=readBigEndianUbyte(); }
		uint bfz=varuint.decode(_buffer, &_index); name=readString(bfz);
		dimension=readBigEndianUbyte();
		generator=readBigEndianUbyte();
		difficulty=readBigEndianUbyte();
		gamemode=readBigEndianUbyte();
		seed=varint.decode(_buffer, &_index);
		parent=varint.decode(_buffer, &_index);
	}

	public static pure nothrow @safe RequestCreation fromBuffer(bool readId=true)(ubyte[] buffer) {
		RequestCreation ret = new RequestCreation();
		ret._buffer = buffer;
		ret.decode!readId();
		return ret;
	}

	public override string toString() {
		return "RequestCreation(name: " ~ std.conv.to!string(this.name) ~ ", dimension: " ~ std.conv.to!string(this.dimension) ~ ", generator: " ~ std.conv.to!string(this.generator) ~ ", difficulty: " ~ std.conv.to!string(this.difficulty) ~ ", gamemode: " ~ std.conv.to!string(this.gamemode) ~ ", seed: " ~ std.conv.to!string(this.seed) ~ ", parent: " ~ std.conv.to!string(this.parent) ~ ")";
	}

}
